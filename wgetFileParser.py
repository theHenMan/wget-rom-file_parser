import re

def get_rom_name():
    ''' Get ROM name from line and strip characters returns from wget '''
    rom = line[slash_position+1:]
    rom = rom.strip("\n")
    rom = strip_hyphens_and_percentages(rom)
    rom = replace_brackets(rom)
    return rom

	
def strip_hyphens_and_percentages(rom):
    ''' Strip the hyphens and percentage signs from ROM filenames
        returned from wget when file was generated. '''
    rom = rom.replace("-", " ").replace("%20", " ")
    return rom

	
def replace_brackets(rom):
    ''' Replace brackets that does not show correctly in ROM filenames.
        "%5B and %5d was returned instead of brackets [] '''
    rom = rom.replace("%5b", "[").replace("%5d", "]")
    return rom


name_and_length = {}
total_zipped_files = 0
total_size_of_roms = 0
rom_filename_length = 0
size_of_rom_length = 0

with open("swf_log.txt", "r") as wget: # Log file generated by wget
    read_data = wget.readlines()

    for line in read_data:

        if line.startswith("--"):
        # Rom name begins with line that starts with "--"
            slash_position = line.rfind("/")
            rom_name = get_rom_name()

            if rom_filename_length < len(rom_name):
                rom_filename_length = len(rom_name)

        if line.startswith("Length: "):
        # ROM size starts with line that begins with "Length: "

            # Regex that searches for spaces and returns length of ROM
            for m in re.finditer(" ", line):
                size_of_rom = line[8:m.end()]
                if size_of_rom_length < len(size_of_rom):
                    size_of_rom_length = len(size_of_rom)
                if size_of_rom != "":
                    break

            if rom_name == "" or rom_name.startswith("?"):
                continue
            else:
                name_and_length[rom_name] = size_of_rom.strip()
                total_zipped_files += 1
                total_size_of_roms += int(size_of_rom.strip())

f = open('Rom Sizes.txt', 'w')
f.write("Total files in directory: ".upper() + str(total_zipped_files))
f.write("\n\nTotal of file sizes in:\t".upper())
f.write("MB:" + str(round((total_size_of_roms / 1024 / 1024), 2)) + \
      "\tGB:" + str(round((total_size_of_roms / 1024 / 1024 / 1024), 2)) + \
      "\tTB:" + str(round((total_size_of_roms / 1024 / 1024 / 1024 / 1024), 2))+ \
      "\n\n\n")

f.write('{:-^{}}'.format("NAME", rom_filename_length) + "  ")
f.write('{:-^{}}'.format("SIZE", size_of_rom_length) + "\n")

for k, v in name_and_length.items():
    f.write(str(k) + '{{0:>{}}}'.format(rom_filename_length).format(str(v)) + '\n')
    # f.write(str(k) + '{:>}{:>}'.format(rom_filename_length, size_of_rom_length) + str(v) + '\n')
    # print(str(k) + '{{0:>{}}}'.format(rom_filename_length+size_of_rom_length).format(str(v)))
    # '{ {0: >{} } }'.format(rom_filename_length+size_of_rom_length).format(str(v))
f.close()

#Print to the console
print("\nTotal files in directory:".upper(), total_zipped_files)
print("\n\nTotal of file sizes in:".upper())
print("MB:", round((total_size_of_roms / 1024 / 1024), 2),
      "\tGB:", round((total_size_of_roms / 1024 / 1024 / 1024), 2),
      "\tTB:", round((total_size_of_roms / 1024 / 1024 / 1024 / 1024), 2))

# {{0: <{}}}'.format(padding_var).format('Hi')
